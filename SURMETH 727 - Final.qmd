---
title: "SURMETH 727 - Final"
format: html
editor: visual
---

```{r}
library(httr)
library(rvest)
library(jsonlite)
library(robotstxt)
library(RSocrata)
library(httr)     
library(dplyr)    
library(xml2)  
library(tidyverse)
library(tidytext)
library(ggplot2)
library(wordcloud)
library(RColorBrewer)
```

# Scraped News articles
## Scarped article headlines from WXYZ News
```{r}
all_headlines_df <- data.frame(Headline = character(), stringsAsFactors = FALSE)

for (page_num in 1:100) {
  
  url <- paste0("https://www.wxyz.com/search?q=food%20quality&p=", page_num)
  
  page <- read_html(url)
  
  headlines <- page %>% 
    html_nodes(xpath = "//*[contains(concat( ' ', @class, ' ' ), concat( ' ', 'ListItem-title', ' ' ))]") %>% 
    html_text() %>% 
    trimws()
  
  temp_df <- data.frame(Headline = headlines, stringsAsFactors = FALSE)
  
  all_headlines_df <- rbind(all_headlines_df, temp_df)
}

head(all_headlines_df, 10)
```

## Scarped article headlines from NYT 
```{r}
url <- "https://www.nytimes.com/search?dropmab=false&endDate=2024-12-03&lang=en&query=food%20quality&sort=best&startDate=2020-01-01"

page <- read_html(url)

headlines <- page %>%
  html_nodes(xpath = "//*[contains(@class, 'css-16nhkrn')]") %>%
  html_text()

nyt_data <- data.frame(Headline = headlines, stringsAsFactors = FALSE)

head(nyt_data, 10)
```

## Combine consumer reviews into one tibble
```{r}
combined_rnewsarticle_df <- rbind(nyt_data, all_headlines_df)

head(combined_rnewsarticle_df)

combined_rnewsarticle_df <- as_tibble(combined_rnewsarticle_df)

class(combined_rnewsarticle_df)
```

# Consumer Reviews
## Scarped apple food review from Amazon Fresh
```{r}
apple_url <- "https://www.amazon.com/-/es/B000RGZMTQ-Manzana-Honeycrisp/dp/B000RGZMTQ/ref=cm_cr_arp_d_product_top?ie=UTF8#customerReviews"

apple_response <- GET(apple_url)

applepage_html <- content(apple_response, as = "text")
apple_page <- read_html(applepage_html)

apple_reviews <- html_nodes(apple_page, xpath = '//*[contains(concat( " ", @class, " " ), concat( " ", "a-text-bold", " " ))]//*[contains(concat( " ", @class, " " ), concat( " ", "cr-original-review-content", " " ))]')

areviews_text <- html_text(apple_reviews)

areviews_cleaned <- trimws(areviews_text)

apple_reviews_df <- data.frame(Product = rep("Honeycrisp Apples", length(areviews_cleaned)),
                               Review = areviews_cleaned,
                               stringsAsFactors = FALSE)

head(apple_reviews_df)
```

## Scarped brocolli food review from Amazon Fresh
```{r}
broccoli_url <- "https://www.amazon.com/-/es/Brócoli-orgánico-1-cabeza/dp/B08731CTJS/ref=sr_1_5_f3_wg?almBrandId=QW1hem9uIEZyZXNo&crid=3LRSTTEYWTRPE&dib=eyJ2IjoiMSJ9.hA0phk1Gz0C_itgI2D-LRxl5Svd3oXq4xk_pk3t4iFXq8jmwF7w51Bsa21QyT5JEV_7auGx--H1Wpyepzu9Na3-9qR3TCsGyLXGIJgyM9CyHnfizgiPs46yJzMYsOOjyPZO4N5yYdGOzlgc6dBYAQtinRzB65tfMEdhltEkF_6FvbKOVVxJNFUqarvDTeDIO173SLhTRD61_8C8l-2nEjWGHAWN712zGY0lQoATJ-CQPIWcV4u47F4Za6crpCjO-h7JLXb3cLxzbVn_YyUaUxRlIPXdSlLGf5AGGVBwq-uo.UqUIW0iT7SOjaKc9YiJak-bwWz5EayzB9eaBSxMzu0E&dib_tag=se&fpw=alm&keywords=broccoli&qid=1733261779&s=amazonfresh&sprefix=broc%2Camazonfresh%2C101&sr=1-5#customerReviews"

broccoli_response <- GET(broccoli_url)

broccoli_html <- content(broccoli_response, as = "text")
broccoli_page <- read_html(broccoli_html)

broccoli_reviews <- html_nodes(broccoli_page, xpath = '//*[contains(concat( " ", @class, " " ), concat( " ", "a-text-bold", " " ))]//*[contains(concat( " ", @class, " " ), concat( " ", "cr-original-review-content", " " ))]')

broccoli_reviews_text <- html_text(broccoli_reviews)

broccoli_reviews_cleaned <- trimws(broccoli_reviews_text)

broccoli_reviews_df <- data.frame(Product = rep("Broccoli", length(broccoli_reviews_cleaned)),
                                   Review = broccoli_reviews_cleaned,
                                   stringsAsFactors = FALSE)
head(broccoli_reviews_df)
```

## Combine consumer reviews into one tibble
```{r}
combined_reviews_df <- rbind(broccoli_reviews_df, apple_reviews_df)

head(combined_reviews_df)

combined_reviews_df <- as_tibble(combined_reviews_df)

class(combined_reviews_df)
```

# Analysis
## Total news headlines for both newspapers based on website numbers
```{r}
Total_news_data <- data.frame(   
  Source = c("NYT Total", "WXYZ Total"),   
  Results = c(109566, 20573) 
)

print(Total_news_data)
```

# Content Analysis
## Content Analysis for Headlines
```{r}
word_tibble <- combined_rnewsarticle_df %>%
  select(Headline) %>%        
  unnest_tokens(word, Headline)  

head(word_tibble)

word_tibble_no_stopwords <- word_tibble %>%
  anti_join(stop_words)

head(word_tibble_no_stopwords)

word_counts <- word_tibble_no_stopwords %>%
  count(word, sort = TRUE)

head(word_counts, 20)
```

## Content Analysis for Consumer Reviews
```{r}
crword_tibble <- combined_reviews_df %>%
  select(Review) %>%        
  unnest_tokens(word, Review)  

head(crword_tibble)

crword_tibble_no_stopwords <- crword_tibble %>%
  anti_join(stop_words)

head(crword_tibble_no_stopwords)

crword_counts <- crword_tibble_no_stopwords %>%
  count(word, sort = TRUE)

head(crword_counts, 20)
```

## Splitting words into three categories - taste, health, and safety
```{r}
taste_keywords <- c("fresh", "crispy", "delicious", "quality")
health_keywords <- c("health", "recalled")
safety_keywords <- c("fda", "coli", "listeria")

taste_words <- word_tibble_no_stopwords %>% filter(word %in% taste_keywords)
health_words <- word_tibble_no_stopwords %>% filter(word %in% health_keywords)
safety_words <- word_tibble_no_stopwords %>% filter(word %in% safety_keywords)

taste_words_cr <- crword_tibble_no_stopwords %>% filter(word %in% taste_keywords)
health_words_cr <- crword_tibble_no_stopwords %>% filter(word %in% health_keywords)
safety_words_cr <- crword_tibble_no_stopwords %>% filter(word %in% safety_keywords)

combined_filtered_data <- bind_rows(
  taste_words %>% mutate(Category = "Taste", Source = "News Articles"),
  health_words %>% mutate(Category = "Health", Source = "News Articles"),
  safety_words %>% mutate(Category = "Safety", Source = "News Articles"),
  taste_words_cr %>% mutate(Category = "Taste", Source = "Consumer Reviews"),
  health_words_cr %>% mutate(Category = "Health", Source = "Consumer Reviews"),
  safety_words_cr %>% mutate(Category = "Safety", Source = "Consumer Reviews"))

head(combined_filtered_data)

combined_categories <- combined_filtered_data %>%
  group_by(Category, word) %>%
  summarise(Frequency = n(), .groups = 'drop')  

head(combined_categories, 20)
```

## Visualization
```{r}
plot <- ggplot(word_counts %>% head(20), aes(x = reorder(word, n), y = n)) +
  geom_bar(stat = "identity", fill = "skyblue") +  
  coord_flip() +  
  labs(
    title = "Top 20 Most Common Words in Article Headlines",
    x = "Word",
    y = "Frequency"
  ) +
  theme_minimal()  
ggsave("article_headline_wordcloud_plot.png", plot, width = 8, height = 6, dpi = 300)
```

```{r}
plot1 <- ggplot(crword_counts %>% head(20), aes(x = reorder(word, n), y = n)) +
  geom_bar(stat = "identity", fill = "skyblue") +  
  coord_flip() + 
  labs(
    title = "Top 20 Most Common Words in Consumer Reviews",
    x = "Word",
    y = "Frequency"
  ) +
  theme_minimal()

ggsave("consumer_review_wordcloud_plot.png", plot1, width = 8, height = 6, dpi = 300)
```


```{r}
ui <- fluidPage(

  titlePanel("Interactive Word Frequency Analysis"),

  sidebarLayout(
    sidebarPanel(

      selectInput("category", "Select Category", 
                  choices = c("Taste", "Health", "Safety"), selected = "Taste"),
  
      sliderInput("top_n", "Top N Words", 
                  min = 1, max = 5, value = 10)
    ),
    
    mainPanel(
      plotlyOutput("bar_plot")
    )
  )
)

server <- function(input, output) {
  
  filtered_data <- reactive({
    combined_categories %>%
      filter(Category == input$category) %>%
      top_n(input$top_n, Frequency)  # Filter top N based on Frequency
  })
  
  output$bar_plot <- renderPlotly({
    data <- filtered_data()
    
    p <- ggplot(data, aes(x = reorder(word, Frequency), y = Frequency)) +
      geom_bar(stat = "identity", fill = "skyblue") +
      coord_flip() +  # Flip the bars for readability
      labs(title = paste("Top", input$top_n, "Words in", input$category, "Category"),
           x = "Word",
           y = "Frequency") +
      theme_minimal()
    
    ggplotly(p)  # Create an interactive plot
  })
}

shinyApp(ui = ui, server = server)
```


```{r}
plot2 <- ggplot(combined_categories, aes(x = reorder(word, Frequency), y = Frequency, fill = Category)) +
  geom_bar(stat = "identity") +
  coord_flip() +
  labs(
    title = "Word Frequency by Category (Taste, Health, Safety)",
    x = "Word",
    y = "Frequency"
  ) +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggsave("word_frequency_wordcloud_plot.png", plot2, width = 8, height = 6, dpi = 300)
```

```{r}
combined_word_counts <- bind_rows(
  word_counts %>% mutate(Source = "News Articles"),
  crword_counts %>% mutate(Source = "Consumer Reviews")
)

combined_word_counts <- combined_word_counts %>%
  group_by(word) %>%
  summarise(Frequency = sum(n), .groups = 'drop')

output_file <- "combined_wordcloud.png"

png(output_file, width = 800, height = 800, res = 150)

wordcloud(words = combined_word_counts$word,
          freq = combined_word_counts$Frequency,
          min.freq = 1,
          scale = c(3, 0.5),
          max.words = 40,
          random.order = FALSE,
          colors = brewer.pal(8, "Dark2"))
```



